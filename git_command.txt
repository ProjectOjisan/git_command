Bashのコマンド
pwd		現在のディレクトリの位置を表示
cd <folder>		フォルダに移動
cd		HOMEのフォルダに移動
cd ..		一つ上のフォルダに移動
cd $HOME/<フォルダ>		HOMEの下のフォルダに直接移動
ls		ファイルの一覧
ls -a		隠しファイルも含めたすべてのファイルの一覧(.\ ..\以外)
mkdir		ディレクトリの作成
rm -r <folder>		フォルダツリーの削除
rm -rf <folder>		フォルダツリーの強制削除
cat <file>		ファイルの内容の表示
vi <file>		ファイルをviエディタで編集
echo <word>		画面に表示
echo <word> >> <file>	ファイルに文字を出力する
touch <file>		空のファイルを作る
cp -r source_dir destination_dir		フォルダを再帰的にコピーする(-rは再帰的にする)
>		リダイレクト

ページャの操作
スペース		次ページ
b		前ページ
q		終了


Gitのコマンド

よく使うもの
git log		ログ(履歴)を表示
git log --patch		パッチ情報を示すリストを表示
git log --oneline		ログを1行表示
git log --oneline <file>		ファイルに関連した1行ログの表示
git log --oneline --all		すべてのブランチの１行履歴出力
git log --stat		ログと変更されたファイルを表示。gitkの「パッチ」ビューと同様の出力。
git log --patch-with-stat		--patchと--statの両方の出力。
git log -n 1		最新のコミットだけを表示
git log -1		git log -n 1の短縮形
git status		gitの状態を表示
git gui		GUIで操作に移る。GUIを閉じると戻る。
git add <file>		ファイルをステージングする
git add .		カレントディレクトリ内の新しいファイルをすべて追加
git commit -m "message"		メッセージの内容でコミットする。メッセージを省略するとエディタが開く。
git commit -a -m "メッセージ"		git addを実行してからコミットする
git diff		カレントディレクトリ内で追跡されているファイルとステージングエリアのファイルもしくはリポジトリ内のファイルと比較する
git diff --staged		ステージングエリアのファイルとリポジトリ内のファイルの比較をする
git rm <file>		ファイルをステージングエリアから削除
git mv <file1> <file2>		ファイル名をファイル1からファイル2に変更する
git reset <file>		ステージングエリアに加えたファイルの変更が取り消される。作業ディレクトリ内のファイルは変更されない。
git restore --staged <file>		ステージングエリアからファイルの変更をどかす
git checkout <SHA1_ID>		作業ディレクトリ内のファイルをSHA1_IDのコミットのファイルに変更してHEADを移動する。
git checkout <branch>		ブランチに移る。作業ディレクトリ内のファイルは変化。HEADはブランチに移動。例えばmasterでmasterブランチ(の最新の状態)に戻る。
git checkout -b <branch> <SHA1_ID or tag>		ブランチを作成してすぐにチェックアウトする(切り替える)
git checkout -- <file>		変更したファイルの変更をなかったことにする
git checkout -f <branch>		編集中の内容を破棄して強制的にブランチを切り替える
git tag <tag> -m "メッセージ" <SHA1_ID>		<SHA1_ID>にタグをつける。例えばHEAD^^はHEADから２つ前のコミットを表す。
git tag -a <tag> -m "メッセージ" <SHA1_ID>		<SHA1_ID>にタグをつける。-m はなくてもできるらしい。
git tag		タグの一覧を表示
git tag -d <tag>		タグを削除する
git branch <branch>		ブランチを作る
git branch		ブランチを表示
git branch --all		すべてのブランチを表示
git branch -v		ブランチの先端のSHA1 IDを表示
git branch -d <branch>		ブランチを削除
git branch <branch> <SHA1_ID>		SHA1 IDを開始地点としてブランチを作る
git stash		現在の作業内容を一時的に保存する。別のブランチにチェックアウト可能になる。
git stash list		stashで退避した作業のリスト出力
git stash pop		stashで退避した作業を取り出す
git merge <branch>		ブランチを現在のブランチにマージする
git mergetool		マージツールを起動(WinMergeとの連携の設定が必要)
git merge --abort		マージ作業を中止する
git difftool		WinMergeでdiffする。(WinMergeとの連携の設定が必要)
git difftool <branch>..<branch>		ブランチ間の比較(WinMergeで１ファイルづつ比較される)


リモート関係のよく使うコマンド
git branch --all		すべてのブランチを表示
git clone source destination_dir		URLまたはローカルディレクトリのクローンディレクトリを作る
git clone source		URLまたはローカルディレクトリのクローンディレクトリを作る。フォルダ名はソースと同じ。
git remote		リモートの名前だけを表示(originが表示されるだけ)
git remote -v show		リモートURLを表示。フェッチとプッシュの操作に使うオリジンがどこにあるかわかる。
git remote -v show <remote>		リモートの情報を表示
git ls-remote		リモートに存在するリファレンス群のSHA1 IDを表示。refs/headsはローカルのブランチ名、refs/tagsはローカルのタグ名。
git ls-remote <origin>		リモートに存在するリファレンス群のSHA1 IDを表示。refs/headsはリモートのブランチ名、refs/tagsはリモートのタグ名。
git ls-remote .		リモートに存在するリファレンス群のSHA1 IDを表示。refs/headsはローカルのブランチ名、refs/tagsはローカルのタグ名。.は現在のローカルリポジトリを表す。
git push <remote> <branch or tag>		リモートにブランチまたはタグをプッシュする
git push		リモートとローカルのブランチの関係がはっきりしているときに、リモートにブランチをプッシュできる
git push --set-upstream <remote> <branch>		リモートに新しいブランチをプッシュする。新しいブランチについて１回実行すればよい。ローカルのブランチは予め作っておくこと。
git push <remote> :<branch>		リモートのブランチを削除する。<source_branch>:<dest_branch>の前半が削除されている指定の仕方。リモートのどんなブランチも削除できてしまうので注意。


Gitの操作(よく使うもの以外)
git ls-files		リポジトリ内のファイルのリスト表示
git ls-tree <tag or branch>		ブランチやタグに含まれるファイルのリスト。例えばHEAD。
git add --dry-run .		Git addで何が実行されるかを表示。.はaddの引数にできる。
git add -p		ステージングエリアに追加すべき変更部分を手作業で選択する
git checkout -- <file>		最後にコミットしたファイルに戻す。ステージングエリアも消える。
git log --shortstat --oneline		履歴をコミットごとに１行で表示、各コミットで変更されたファイルを１行で表示
git log --parents		各コミットの親コミットのSHA1 IDを表示
git log --parents --abbrev-commit		各コミットの親コミットを短縮されたSHA1 IDで表示(40文字のうちの最初の7文字)
git rev-parse <tag of branch>		タグやブランチ名をSHA1 IDに変換する。例えばHEADとかmaster。
git show <tag or branch>		タグやブランチの情報を表示
git commit --amend -m "メッセージ"		直前のコミットのメッセージを修正
git log --graph --decorate --pretty=oneline --all --abbrev-commit		リポジトリの履歴をすべてのブランチにわたって閲覧する
git reflog		これまでに(git checkoutによって)行ったブランチ切替のすべての記録を表示する
git diff <branch>...<branch>		2つのブランチの間の差分を表示
git diff --name-status <branch>...<branch>		マージされるファイルを表示
git merge-base <branch> <branch>		マージするときのベース(共通祖先)の表示


リモート関係のコマンド(よく使うもの以外)
git clone --bare source destination_dir		ベアリポジトリを作る(元のリポジトリへのリンクを含まない。作業ディレクトリがない・・・.gitの中身がそのままある。)
git clone --origin <name> source destination_dir		リモート追跡ブランチの名前originをnameに変えてクローンを作る
git clone --depth <depth> source destination_dir		ヒストリーを<depth>で指定された数のリビジョンだけに短縮して複製(ローカルでの複製にはfile://URL形式が必要)
git clone --depth 1 --no-single-branch source destination_dir		すべてのブランチを1つのコミットで構成されるリポジトリとして複製(ローカルでの複製にはfile://URL形式が必要)
git remote rename <origin> <neme>		リモートの名前をnameに変更する。<origin>は変更前のリモートの名前：例えばorigin。
git remote add <name> <remote>		リモートを新しく追加する。例えば2つめのリモートが追加できる。
GIT_TRACE_PACKET=1 git ls-remote <remote>		リモートとのネットワーク通信の内容を表示する
git push --force <remote> <branch>		プッシュできない状況でも強制的にプッシュする。git pullを使うべき。
git push --tags		複数のタグをプッシュする。


その他
git --version		gitのバージョンを表示
git config --global user.name "Your Name"		名前の登録
git config --global user.email "Your E-mail@example.com"		メールアドレスの登録
git config --list		gitのすべての設定を表示
git config user.name		ユーザー名の表示
git config user.email		ユーザーのメールアドレスの表示
git config --global --unset <キー>		キーを削除
git citool		変更をコミットするgitのGUIに移る
gitk		gitkを起動
git blame <file>		ファイルのプレーム出力を表示
git help <command>		コマンドのヘルプ
git <command> --help		コマンドのヘルプ
git help -g		gitのガイドのリスト
git help --glossary		gitの用語
git help help		gitのヘルプシステムのヘルプ
git help -a		利用できるコマンドのリスト(結構長い)
git -paginate help -a		すべてのgitコマンドをページで表示
git config --global alias.lol "log --graph --decorate --pretty=oneline --all --abbrev-commit"
		git lolでブランチの履歴を図のように表示する別名(alias)ができる(1回だけ実行すればよい)
git config --global push.default simple		pushの動作のデフォルトをブランチ名が上流のブランチと同じものだけプッシュする。シェアするつもりのないブランチをリモートにプッシュするミスを予防できる。1回だけ設定。


他の場所からの情報
git config --global core.quotepath false		日本語のファイル名の文字化けを直す
git config --global gui.encoding utf-8		gitkのファイル内のutf-8の文字化けを直す
